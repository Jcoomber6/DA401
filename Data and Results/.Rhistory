Vehicle_transposed2021 <- Vehicle_transposed2021 %>% rename(TotalRent = Renteroccupied)
Vehicle_transposed2021 <- Vehicle_transposed2021 %>% rename(NoRentVehicleAvailable = Novehicleavailable.1)
Vehicle_transposed2021 <- Vehicle_transposed2021 %>% rename(OneRentVehicleAvailable = vehicleavailable.1)
Vehicle_transposed2021 <- Vehicle_transposed2021 %>% rename(TwoRentVehicleAvailable = vehiclesavailable.3)
Vehicle_transposed2021 <- Vehicle_transposed2021 %>% rename(ThreeRentVehicleAvailable = vehiclesavailable.4)
Vehicle_transposed2021 <- Vehicle_transposed2021 %>% rename(FourRentVehicleAvailable = vehiclesavailable.5)
Vehicle_transposed2021 <- Vehicle_transposed2021 %>% rename(FiveOrMoreRentVehicleAvailable = ormorevehiclesavailable.1)
Vehicle_transposed2021 <- Vehicle_transposed2021 %>% rename(TotalNumVehicles = Total)
# Keep only rows with "Estimate" and remove "Margin.of.Error"
Vehicle_transposed2021 <- Vehicle_transposed2021[!grepl("Margin.of.Error", rownames(Vehicle_transposed2021)), ]
# Rename row names by removing "..Estimate"
rownames(Vehicle_transposed2021) <- gsub("\\.\\.Estimate", "", rownames(Vehicle_transposed2021))
Vehicle_transposed2021$State <- gsub("\\.\\.Estimate", "", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("District.of.Columbia", "District of Columbia", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("Puerto.Rico", "Puerto Rico", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("West.Virginia", "West Virginia", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("New.Hampshire", "New Hampshire", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("North.Carolina", "North Carolina", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("South.Carolina", "South Carolina", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("Rhode.Island", "Rhode Island", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("North.Dakota", "North Dakota", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("South.Dakota", "South Dakota", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("New.Mexico", "New Mexico", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("New.Jersey", "New Jersey", Vehicle_transposed2021$State)
Vehicle_transposed2021$State <- gsub("New.York", "New York", Vehicle_transposed2021$State)
Vehicle2020 <- read.csv("Tenure by Vehicles Available_2020.csv", header = TRUE, sep = ",")
# Transpose using pivot_longer and pivot_wider
Vehicle_transposed2020 <- Vehicle2020 %>%
t() %>%
as.data.frame(stringsAsFactors = FALSE)
# Store original column names as a new column
Vehicle_transposed2020 <- Vehicle_transposed2020 %>%
mutate(Original_Column_Names = rownames(Vehicle_transposed2020))
# Set first row as column names
colnames(Vehicle_transposed2020) <- Vehicle_transposed2020[1, ]
# Remove the first row, keeping the new column names
Vehicle_transposed2020 <- Vehicle_transposed2020[-1, ]
# Remove all non-letter characters from column names
colnames(Vehicle_transposed2020) <- gsub("[^A-Za-z]", "", colnames(Vehicle_transposed2020))
colnames(Vehicle_transposed2020) <- make.unique(colnames(Vehicle_transposed2020))
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(State = LabelGrouping)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(TotalOwned = Owneroccupied)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(NoVehicleAvailable = Novehicleavailable)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(OneVehicleAvailable = vehicleavailable)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(TwoVehicleAvailable = vehiclesavailable)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(ThreeVehicleAvailable = vehiclesavailable.1)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(FourVehicleAvailable = vehiclesavailable.2)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(FiveOrMoreVehicleAvailable = ormorevehiclesavailable)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(TotalRent = Renteroccupied)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(NoRentVehicleAvailable = Novehicleavailable.1)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(OneRentVehicleAvailable = vehicleavailable.1)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(TwoRentVehicleAvailable = vehiclesavailable.3)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(ThreeRentVehicleAvailable = vehiclesavailable.4)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(FourRentVehicleAvailable = vehiclesavailable.5)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(FiveOrMoreRentVehicleAvailable = ormorevehiclesavailable.1)
Vehicle_transposed2020 <- Vehicle_transposed2020 %>% rename(TotalNumVehicles = Total)
# Keep only rows with "Estimate" and remove "Margin.of.Error"
Vehicle_transposed2020 <- Vehicle_transposed2020[!grepl("Margin.of.Error", rownames(Vehicle_transposed2020)), ]
# Rename row names by removing "..Estimate"
rownames(Vehicle_transposed2020) <- gsub("\\.\\.Estimate", "", rownames(Vehicle_transposed2020))
Vehicle_transposed2020$State <- gsub("\\.\\.Estimate", "", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("District.of.Columbia", "District of Columbia", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("Puerto.Rico", "Puerto Rico", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("West.Virginia", "West Virginia", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("New.Hampshire", "New Hampshire", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("North.Carolina", "North Carolina", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("South.Carolina", "South Carolina", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("Rhode.Island", "Rhode Island", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("North.Dakota", "North Dakota", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("South.Dakota", "South Dakota", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("New.Mexico", "New Mexico", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("New.Jersey", "New Jersey", Vehicle_transposed2020$State)
Vehicle_transposed2020$State <- gsub("New.York", "New York", Vehicle_transposed2020$State)
# Remove 2024 from TelehealthandPopulation before merging
TelehealthandPopulation <- TelehealthandPopulation %>%
filter(Year != 2024)
# Create a list of the vehicle datasets
vehicle_data <- list(
"2020" = Vehicle_transposed2020,
"2021" = Vehicle_transposed2021,
"2022" = Vehicle_transposed2022,
"2023" = Vehicle_transposed2023
)
# Convert each yearâ€™s vehicle data into a long format and combine
Vehicle_long <- bind_rows(
lapply(names(vehicle_data), function(year) {
vehicle_data[[year]] %>%
mutate(Year = as.numeric(year)) # Add the year as a column
})
)
# Merge the reshaped Vehicle dataset with TelehealthandPopulation on State and Year
TelehealthandPopulation_Vehicle <- merge(TelehealthandPopulation, Vehicle_long, by = c("State", "Year"), all = TRUE)
InternetSubs2023 <- read.csv("Presence and Types of Internet Subscriptions_2023.csv", header = TRUE, sep = ",")
# Transpose using pivot_longer and pivot_wider
Internet_transposed2023 <- InternetSubs2023 %>%
t() %>%
as.data.frame(stringsAsFactors = FALSE)
# Store original column names as a new column
Internet_transposed2023 <- Internet_transposed2023 %>%
mutate(Original_Column_Names = rownames(Internet_transposed2023))
# Set first row as column names
colnames(Internet_transposed2023) <- Internet_transposed2023[1, ]
# Remove the first row, keeping the new column names
Internet_transposed2023 <- Internet_transposed2023[-1, ]
# Remove all non-letter characters from column names
colnames(Internet_transposed2023) <- gsub("[^A-Za-z]", "", colnames(Internet_transposed2023))
colnames(Internet_transposed2023) <- make.unique(colnames(Internet_transposed2023))
Internet_transposed2023 <- Internet_transposed2023 %>% rename(State = LabelGrouping)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(WithInternet = WithanInternetsubscription)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(DialUpNoInternetSubs = DialupwithnoothertypeofInternetsubscription)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(BroadBandAnyType = Broadbandofanytype)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(CellularData = Cellulardataplan)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(CellularDataAndAnotherType = CellulardataplanwithnoothertypeofInternetsubscription)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(CableFiberOrDSL = BroadbandsuchascablefiberopticorDSL)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(CableFiberOrDSLOnly = BroadbandsuchascablefiberopticorDSLwithnoothertypeofInternetsubscription)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(SatelliteInternet = SatelliteInternetservice)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(SatelliteInternetOnly = SatelliteInternetservicewithnoothertypeofInternetsubscription)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(OtherServiceOnly = OtherservicewithnoothertypeofInternetsubscription)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(InternetAccessNoSubscription = Internetaccesswithoutasubscription)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(NoInternet = NoInternetaccess)
Internet_transposed2023 <- Internet_transposed2023 %>% rename(TotalWithInternet = Total)
# Keep only rows with "Estimate" and remove "Margin.of.Error"
Internet_transposed2023 <- Internet_transposed2023[!grepl("Margin.of.Error", rownames(Internet_transposed2023)), ]
# Rename row names by removing "..Estimate"
rownames(Internet_transposed2023) <- gsub("\\.\\.Estimate", "", rownames(Internet_transposed2023))
Internet_transposed2023$State <- gsub("\\.\\.Estimate", "", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("District.of.Columbia", "District of Columbia", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("Puerto.Rico", "Puerto Rico", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("West.Virginia", "West Virginia", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("New.Hampshire", "New Hampshire", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("North.Carolina", "North Carolina", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("South.Carolina", "South Carolina", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("Rhode.Island", "Rhode Island", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("North.Dakota", "North Dakota", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("South.Dakota", "South Dakota", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("New.Mexico", "New Mexico", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("New.Jersey", "New Jersey", Internet_transposed2023$State)
Internet_transposed2023$State <- gsub("New.York", "New York", Internet_transposed2023$State)
InternetSubs2022 <- read.csv("Presence and Types of Internet Subscriptions_2022.csv", header = TRUE, sep = ",")
# Transpose using pivot_longer and pivot_wider
Internet_transposed2022 <- InternetSubs2022 %>%
t() %>%
as.data.frame(stringsAsFactors = FALSE)
# Store original column names as a new column
Internet_transposed2022 <- Internet_transposed2022 %>%
mutate(Original_Column_Names = rownames(Internet_transposed2022))
# Set first row as column names
colnames(Internet_transposed2022) <- Internet_transposed2022[1, ]
# Remove the first row, keeping the new column names
Internet_transposed2022 <- Internet_transposed2022[-1, ]
# Remove all non-letter characters from column names
colnames(Internet_transposed2022) <- gsub("[^A-Za-z]", "", colnames(Internet_transposed2022))
colnames(Internet_transposed2022) <- make.unique(colnames(Internet_transposed2022))
Internet_transposed2022 <- Internet_transposed2022 %>% rename(State = LabelGrouping)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(WithInternet = WithanInternetsubscription)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(DialUpNoInternetSubs = DialupwithnoothertypeofInternetsubscription)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(BroadBandAnyType = Broadbandofanytype)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(CellularData = Cellulardataplan)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(CellularDataAndAnotherType = CellulardataplanwithnoothertypeofInternetsubscription)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(CableFiberOrDSL = BroadbandsuchascablefiberopticorDSL)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(CableFiberOrDSLOnly = BroadbandsuchascablefiberopticorDSLwithnoothertypeofInternetsubscription)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(SatelliteInternet = SatelliteInternetservice)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(SatelliteInternetOnly = SatelliteInternetservicewithnoothertypeofInternetsubscription)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(OtherServiceOnly = OtherservicewithnoothertypeofInternetsubscription)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(InternetAccessNoSubscription = Internetaccesswithoutasubscription)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(NoInternet = NoInternetaccess)
Internet_transposed2022 <- Internet_transposed2022 %>% rename(TotalWithInternet = Total)
# Keep only rows with "Estimate" and remove "Margin.of.Error"
Internet_transposed2022 <- Internet_transposed2022[!grepl("Margin.of.Error", rownames(Internet_transposed2022)), ]
# Rename row names by removing "..Estimate"
rownames(Internet_transposed2022) <- gsub("\\.\\.Estimate", "", rownames(Internet_transposed2022))
Internet_transposed2022$State <- gsub("\\.\\.Estimate", "", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("District.of.Columbia", "District of Columbia", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("Puerto.Rico", "Puerto Rico", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("West.Virginia", "West Virginia", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("New.Hampshire", "New Hampshire", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("North.Carolina", "North Carolina", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("South.Carolina", "South Carolina", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("Rhode.Island", "Rhode Island", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("North.Dakota", "North Dakota", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("South.Dakota", "South Dakota", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("New.Mexico", "New Mexico", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("New.Jersey", "New Jersey", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("New.York", "New York", Internet_transposed2022$State)
InternetSubs2021 <- read.csv("Presence and Types of Internet Subscriptions_2021.csv", header = TRUE, sep = ",")
# Transpose using pivot_longer and pivot_wider
Internet_transposed2021 <- InternetSubs2021 %>%
t() %>%
as.data.frame(stringsAsFactors = FALSE)
# Store original column names as a new column
Internet_transposed2021 <- Internet_transposed2021 %>%
mutate(Original_Column_Names = rownames(Internet_transposed2021))
# Set first row as column names
colnames(Internet_transposed2021) <- Internet_transposed2021[1, ]
# Remove the first row, keeping the new column names
Internet_transposed2021 <- Internet_transposed2021[-1, ]
# Remove all non-letter characters from column names
colnames(Internet_transposed2021) <- gsub("[^A-Za-z]", "", colnames(Internet_transposed2021))
colnames(Internet_transposed2021) <- make.unique(colnames(Internet_transposed2021))
Internet_transposed2021 <- Internet_transposed2021 %>% rename(State = LabelGrouping)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(WithInternet = WithanInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(DialUpNoInternetSubs = DialupwithnoothertypeofInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(BroadBandAnyType = Broadbandofanytype)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(CellularData = Cellulardataplan)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(CellularDataAndAnotherType = CellulardataplanwithnoothertypeofInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(CableFiberOrDSL = BroadbandsuchascablefiberopticorDSL)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(CableFiberOrDSLOnly = BroadbandsuchascablefiberopticorDSLwithnoothertypeofInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(SatelliteInternet = SatelliteInternetservice)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(SatelliteInternetOnly = SatelliteInternetservicewithnoothertypeofInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(OtherServiceOnly = OtherservicewithnoothertypeofInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(InternetAccessNoSubscription = Internetaccesswithoutasubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(NoInternet = NoInternetaccess)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(TotalWithInternet = Total)
# Keep only rows with "Estimate" and remove "Margin.of.Error"
Internet_transposed2021 <- Internet_transposed2021[!grepl("Margin.of.Error", rownames(Internet_transposed2021)), ]
# Rename row names by removing "..Estimate"
rownames(Internet_transposed2021) <- gsub("\\.\\.Estimate", "", rownames(Internet_transposed2021))
Internet_transposed2021$State <- gsub("\\.\\.Estimate", "", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("District.of.Columbia", "District of Columbia", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("Puerto.Rico", "Puerto Rico", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("West.Virginia", "West Virginia", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("New.Hampshire", "New Hampshire", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("North.Carolina", "North Carolina", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("South.Carolina", "South Carolina", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("Rhode.Island", "Rhode Island", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("North.Dakota", "North Dakota", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("South.Dakota", "South Dakota", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("New.Mexico", "New Mexico", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("New.Jersey", "New Jersey", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("New.York", "New York", Internet_transposed2021$State)
InternetSubs2020 <- read.csv("Presence and Types of Internet Subscriptions_2020.csv", header = TRUE, sep = ",")
# Transpose using pivot_longer and pivot_wider
Internet_transposed2020 <- InternetSubs2020 %>%
t() %>%
as.data.frame(stringsAsFactors = FALSE)
# Store original column names as a new column
Internet_transposed2020 <- Internet_transposed2020 %>%
mutate(Original_Column_Names = rownames(Internet_transposed2020))
# Set first row as column names
colnames(Internet_transposed2020) <- Internet_transposed2020[1, ]
# Remove the first row, keeping the new column names
Internet_transposed2020 <- Internet_transposed2020[-1, ]
# Remove all non-letter characters from column names
colnames(Internet_transposed2020) <- gsub("[^A-Za-z]", "", colnames(Internet_transposed2020))
colnames(Internet_transposed2020) <- make.unique(colnames(Internet_transposed2020))
Internet_transposed2020 <- Internet_transposed2020 %>% rename(State = LabelGrouping)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(WithInternet = WithanInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(DialUpNoInternetSubs = DialupwithnoothertypeofInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(BroadBandAnyType = Broadbandofanytype)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(CellularData = Cellulardataplan)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(CellularDataAndAnotherType = CellulardataplanwithnoothertypeofInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(CableFiberOrDSL = BroadbandsuchascablefiberopticorDSL)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(CableFiberOrDSLOnly = BroadbandsuchascablefiberopticorDSLwithnoothertypeofInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(SatelliteInternet = SatelliteInternetservice)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(SatelliteInternetOnly = SatelliteInternetservicewithnoothertypeofInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(OtherServiceOnly = OtherservicewithnoothertypeofInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(InternetAccessNoSubscription = Internetaccesswithoutasubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(NoInternet = NoInternetaccess)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(TotalWithInternet = Total)
# Keep only rows with "Estimate" and remove "Margin.of.Error"
Internet_transposed2020 <- Internet_transposed2020[!grepl("Margin.of.Error", rownames(Internet_transposed2020)), ]
# Rename row names by removing "..Estimate"
rownames(Internet_transposed2020) <- gsub("\\.\\.Estimate", "", rownames(Internet_transposed2020))
Internet_transposed2020$State <- gsub("\\.\\.Estimate", "", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("District.of.Columbia", "District of Columbia", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("Puerto.Rico", "Puerto Rico", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("West.Virginia", "West Virginia", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("New.Hampshire", "New Hampshire", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("North.Carolina", "North Carolina", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("South.Carolina", "South Carolina", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("Rhode.Island", "Rhode Island", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("North.Dakota", "North Dakota", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("South.Dakota", "South Dakota", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("New.Mexico", "New Mexico", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("New.Jersey", "New Jersey", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("New.York", "New York", Internet_transposed2020$State)
# Create a list of the vehicle datasets
Internet_data <- list(
"2020" = Internet_transposed2020,
"2021" = Internet_transposed2021,
"2022" = Internet_transposed2022,
"2023" = Internet_transposed2023
)
# Convert each yearâ€™s vehicle data into a long format and combine
Internet_long <- bind_rows(
lapply(names(Internet_data), function(year) {
Internet_data[[year]] %>%
mutate(Year = as.numeric(year)) # Add the year as a column
})
)
# Merge the reshaped Internet dataset with TelehealthandPopulation_Vehicle on State and Year
TelehealthandPopulation_VehicleInternet <- merge(TelehealthandPopulation_Vehicle, Internet_long, by = c("State", "Year"), all = TRUE)
# Convert columns from character to numeric
columns_to_convert <- c("POP", "TotalNumVehicles", "TotalOwned",
"NoVehicleAvailable", "OneVehicleAvailable",
"TwoVehicleAvailable", "ThreeVehicleAvailable",
"FourVehicleAvailable", "FiveOrMoreVehicleAvailable",
"TotalRent", "NoRentVehicleAvailable",
"OneRentVehicleAvailable", "TwoRentVehicleAvailable",
"ThreeRentVehicleAvailable", "FourRentVehicleAvailable",
"FiveOrMoreRentVehicleAvailable", "TotalWithInternet",
"WithInternet", "DialUpNoInternetSubs",
"BroadBandAnyType", "CellularData",
"CellularDataAndAnotherType", "CableFiberOrDSL",
"CableFiberOrDSLOnly", "SatelliteInternet",
"SatelliteInternetOnly", "OtherServiceOnly",
"InternetAccessNoSubscription", "NoInternet")
# Apply gsub to clean each column before conversion
TelehealthandPopulation_VehicleInternet[columns_to_convert] <- lapply(TelehealthandPopulation_VehicleInternet[columns_to_convert], function(x) {
# Remove non-numeric characters
cleaned_x <- gsub("[^0-9.-]", "", x)
# Convert to numeric
as.numeric(cleaned_x)
})
#Create a new variable for TotalNumVehicles per capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TotalNumVehiclesPerCapita = TotalNumVehicles / POP  # Normalize per person (per capita)
)
#Create a new variable for TotalOwned per capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TotalOwnedPerCapita = (TotalNumVehicles / POP)
)
#Create a new variable for NoVehicleAvailable per capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
NoVehicleAvailablePerCapita = (NoVehicleAvailable / POP)
)
#Create a new variable for OneVehicleAvailable per capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
OneVehicleAvailablePerCapita = (OneVehicleAvailable / POP)
)
#Create a new variable for TwoVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TwoVehicleAvailablePerCapita = (TwoVehicleAvailable / POP)
)
#Create a new variable for ThreeVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
ThreeVehicleAvailablePerCapita = (ThreeVehicleAvailable / POP)
)
#Create a new variable for FourVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
FourVehicleAvailablePerCapita = (FourVehicleAvailable / POP)
)
#Create a new variable for FiveOrMoreVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
FiveOrMoreVehicleAvailablePerCapita = (FiveOrMoreVehicleAvailable / POP)
)
#Create a new variable for TotalRent per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TotalRentPerCapita = (TotalRent / POP)
)
#Create a new variable for NoRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
NoRentVehicleAvailablePerCapita = (NoRentVehicleAvailable / POP)
)
#Create a new variable for OneRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
OneRentVehicleAvailablePerCapita = (OneRentVehicleAvailable / POP)
)
#Create a new variable for TwoRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TwoRentVehicleAvailablePerCapita = (TwoRentVehicleAvailable / POP)
)
#Create a new variable for ThreeRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
ThreeRentVehicleAvailablePerCapita = (ThreeRentVehicleAvailable / POP)
)
#Create a new variable for FourRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
FourRentVehicleAvailablePerCapita = (FourRentVehicleAvailable / POP)
)
#Create a new variable for FiveOrMoreRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
FiveOrMoreRentVehicleAvailablePerCapita = (FiveOrMoreRentVehicleAvailable / POP)
)
#Create a new variable for WithInternet per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
WithInternetPerCapita = (WithInternet / POP)
)
#Create a new variable for DialUpNoInternetSubs per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
DialUpNoInternetSubsPerCapita = (DialUpNoInternetSubs / POP)
)
#Create a new variable for BroadBandAnyType per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
BroadBandAnyTypePerCapita = (BroadBandAnyType / POP)
)
#Create a new variable for CellularData per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
CellularDataPerCapita = (CellularData / POP)
)
#Create a new variable for CellularDataAndAnotherType per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
CellularDataAndAnotherTypePerCapita = (CellularDataAndAnotherType / POP)
)
#Create a new variable for CableFiberOrDSL per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
CableFiberOrDSLPerCapita = (CableFiberOrDSL / POP)
)
#Create a new variable for SatelliteInternet per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
SatelliteInternetPerCapita = (SatelliteInternet / POP)
)
#Create a new variable for SatelliteInternetOnly per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
SatelliteInternetOnlyPerCapita = (SatelliteInternetOnly / POP)
)
#Create a new variable for OtherServiceOnly per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
OtherServiceOnlyPerCapita = (OtherServiceOnly / POP)
)
#Create a new variable for InternetAccessNoSubscrition per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
InternetAccessNoSubscriptionPerCapita = (InternetAccessNoSubscription / POP)
)
#Create a new variable for NoInternet per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
NoInternetPerCapita = (NoInternet / POP)
)
#Create a new variable for TelehealthVisits per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TelehealthVisitsPerCapita = (TelehealthVisits / POP)
)
#Create a new variable for EligibleServicesCount per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
EligibleServicesCountPerCapita = (EligibleServicesCount / POP)
)
Hospitals <- read.csv("CentersForMedicareAndMedicaidServicesFacilities Hospitals.csv", header = TRUE, sep = ",")
# Remove all non-letter characters from column names
colnames(Hospitals) <- gsub("[^A-Za-z]", "", colnames(Hospitals))
# Removing Columns that are NA
Hospitals <- dplyr::select(Hospitals, -NoofBeds, -NoofCertifiedBeds, -NoofMedicaidNursingBeds, -NoofSkilledNursingBeds, -NoofICFMRBeds, - NoofPhysicianAssistants, -NoofNursePractitioners, -NoofDirectCarePersonnel, -NoofOtherPersonnel, -EmployeeCount, -FederallyFundedHealthCenterIndicator, -RuralHealthCenterProviderNumber, -RuralHealthClinicIndicator)
# Removing Columns that are Not Needed
Hospitals <- dplyr::select(Hospitals, -Telephone, -ZIPCode, -StreetAddress, - ProviderNo)
# Remove rows where State is one of the specified territories
Hospitals <- Hospitals %>%
filter(!State %in% c("U.S. Virgin Islands", "American Samoa", "Guam", "Northern Mariana Islands"))
#Hospital count
Hospitals$hospital_count <- table(Hospitals$State)[Hospitals$State]
# Select the 'State' and 'hospital_count' columns from Hospitals
hospital_count_df <- Hospitals %>%
group_by(State) %>%
summarize(hospital_count = n())
# Merge the Hospital dataset with TelehealthandPopulation_VehicleInternet on State
TelehealthandPopulation_VehicleInternetHospital <- merge(TelehealthandPopulation_VehicleInternet, hospital_count_df, by = c("State"), all = TRUE)
#Create a new variable for Hospital Count per Capita
TelehealthandPopulation_VehicleInternetHospital <- TelehealthandPopulation_VehicleInternetHospital %>%
mutate(
HospitalCountPerCapita = (hospital_count / POP)
)
physician_sum_df <- Hospitals %>%
group_by(State) %>%
summarize(NoofPhysicians = sum(NoofPhysicians, na.rm = TRUE), .groups = "drop")
TelehealthandPopulation_VehicleInternetHospital <- merge(TelehealthandPopulation_VehicleInternetHospital, physician_sum_df, by = c("State"), all = TRUE)
#Create a new variable for Hospital Count per Capita
TelehealthandPopulation_VehicleInternetHospital <- TelehealthandPopulation_VehicleInternetHospital %>%
mutate(
NoofPhysiciansPerCapita = (NoofPhysicians / POP)
)
# Load the data
GDP <- read.csv("GDP.csv", header = TRUE, sep = ",")
UNRATE <- read.csv("UNRATE.csv", header = TRUE, sep = ",")
GDP <- GDP %>%
mutate(Year = year(as.Date(observation_date)))
UNRATE <- UNRATE %>%
mutate(Year = year(as.Date(observation_date)))
GDP <- dplyr::select(GDP, -observation_date)
UNRATE <- dplyr::select(UNRATE, -observation_date)
# Merge only on Year and keep only GDP and UNRATE
TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE <- TelehealthandPopulation_VehicleInternetHospital %>%
inner_join(GDP, by = "Year") %>%
inner_join(UNRATE, by = "Year")
# Convert from billions to trillions
TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE$GDP_trillions <- TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE$GDP / 1000
# Convert from percentage to proportion
TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE$UNRATE_prop <- TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE$UNRATE / 100
Transit <- read.csv("Transit Report Card.csv", header = TRUE, sep = ",")
Transit <- Transit %>% rename(State = States, TransitSpendingPerCapita = Transit.spending.per.capita, TransitSpendingScore = Transit.spending.score, LegalRestrictionCategory = Legal.restrictions.on.transit.funding, LegalRestrictionScore = Legal.restrictions.score, VMTPerCapita = VMT.per.capita..2019., VMTScore = VMT.score, TransitAccessScore = Transit.access.score, OverallTransitScore = Overall.score)
# Merge datasets on 'state'
TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE_Transit <- merge(Transit, TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE, by = "State", all = TRUE)
library(writexl)
# Export the data frame to an Excel file
write_xlsx(TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE_Transit,
path = "TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE_Transit.xlsx")
setwd("~/Desktop/Denison_Coursework/Senior Spring/DA401/Data and Results")
