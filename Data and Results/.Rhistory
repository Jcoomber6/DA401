title = "Forecast of Delayed Medical Care for No High School Diploma or GED",
subtitle = "Forecast includes a 95% confidence interval",
x = "Year",
y = "Percent of People with Lack of Access (Log)"
)
all_survey_merged <- all_survey_merged %>%
mutate(YEAR = as.numeric(YEAR)) %>%
as_tibble()  # Convert to tibble for aggregation
# Group and summarize, then convert back to tsibble
Medical_care_clean <- all_survey_merged %>%
group_by(YEAR) %>%  # Group by YEAR
summarize(log_ESTIMATE = sum(log_ESTIMATE, na.rm = TRUE)) %>%  # Summarize log_ESTIMATE
as_tsibble(index = YEAR)  # Convert back to tsibble
recent_medical_care <- Medical_care_clean %>%
filter(YEAR >= 1997)
train <- recent_medical_care %>%
filter(YEAR <= 2018) # What should I make these dates?
medical_fit <- train %>%
model(
Mean = MEAN(log_ESTIMATE),
Naive = NAIVE(log_ESTIMATE),
Drift = RW(log_ESTIMATE ~ drift())
)
medical_fc <- medical_fit %>%
forecast(h = 10)
accuracy(medical_fit)
all_survey_merged %>%
group_by(YEAR) %>%
summarize(mean_log_estimate = mean(log_ESTIMATE, na.rm = TRUE)) %>%
ggplot(aes(x = YEAR, y = mean_log_estimate)) +
geom_line() +
geom_vline(xintercept = 2010, linetype = "dashed", color = "red") +
labs(title = "Trend of Access to Healthcare Over Time -
Affordable Care Act (Obama Care)",
x = "Year",
y = "Mean Log Estimate") +
theme_minimal()
library(lubridate)
USGDP_annual <- read.csv("GDP_anual2.csv", header = TRUE, sep = ",")
USGDP_annual <- USGDP_annual %>%
mutate(
year = year(DATE))
all_survey_merged <- all_survey_merged %>%
mutate(
Low_Income = ifelse(
STUB_LABEL %in% c(
"Black or African American only",
"Hispanic or Latino: All races",
"No high school diploma or GED",
"Medicaid",
"Uninsured"
),
"Low",  # Assign Low if in the specified categories
"NotLow"   # Assign NotLow otherwise
)
)
# Merge GDP to Data with the Low Income Group
mergingGDP <- all_survey_merged %>%
left_join(USGDP_annual, by = c("YEAR" = "year"))
library(FNN)
library(MASS)
library(tidyverse)
set.seed(123)
train_merged_data <- mergingGDP %>%
filter(Low_Income == "Low")
x_train_merged_data <- train_merged_data$GDP
y_train_merged_data <- train_merged_data$log_ESTIMATE
# Apply KNN for different values of k
pred_1 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 1)
pred_10 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 10)
pred_20 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 20)
pred_30 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 30)
pred_40 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 40)
# Create a dataframe to store actual and predicted values
predicted <- data.frame(
GDP = x_train_merged_data,  # Independent variable (GDP)
actual_estimate = y_train_merged_data,  # Actual target (Estimate)
pred_1 = pred_1$pred,  # Predictions for k = 1
pred_10 = pred_10$pred,  # Predictions for k = 10
pred_20 = pred_20$pred,  # Predictions for k = 20
pred_30 = pred_30$pred,  # Predictions for k = 30
pred_40 = pred_40$pred   # Predictions for k = 40
)
# Plot the actual vs. predicted values for different k values
ggplot(predicted, aes(x = GDP, y = actual_estimate)) +
geom_point() +  # Scatter plot for actual values
geom_line(aes(y = pred_1, color = "k = 1")) +
geom_line(aes(y = pred_10, color = "k = 10")) +
geom_line(aes(y = pred_20, color = "k = 20")) +
geom_line(aes(y = pred_30, color = "k = 30")) +
geom_line(aes(y = pred_40, color = "k = 40")) +
scale_color_manual(values = c("k = 1" = "green", "k = 10" = "orange",
"k = 20" = "blue", "k = 30" = "red",
"k = 40" = "purple")) +
labs(title = "KNN Regression Estimate by GDP (Low Income Individuals)",
x = "GDP",
y = "Estimate (Log)",
color = "K Values") +
theme_minimal()
mse1 <- mean((y_train_merged_data - pred_1$pred)^2)
mse1
mse10 <- mean((y_train_merged_data - pred_10$pred)^2)
mse10
mse20 <- mean((y_train_merged_data - pred_20$pred)^2)
mse20
mse30 <- mean((y_train_merged_data - pred_30$pred)^2)
mse30
mse40 <- mean((y_train_merged_data - pred_40$pred)^2)
mse40
unemployment_rate <- read.csv("UNRATE.csv", header = TRUE, sep = ",")
unemployment_rate <- unemployment_rate %>%
mutate(year = year(DATE),
month = month(DATE),
day = day(DATE))
mergingUNRATE <- mergingGDP %>%
left_join(unemployment_rate, by = c("YEAR" = "year"))
set.seed(123)
train_merged_data <- mergingUNRATE %>%
filter(Low_Income == "Low")
x_train_merged_data <- train_merged_data$UNRATE
y_train_merged_data <- train_merged_data$log_ESTIMATE
# Apply KNN for different values of k
pred_1 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 1)
pred_10 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 10)
pred_20 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 20)
pred_30 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 30)
pred_40 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 40)
# Create a dataframe to store actual and predicted values
predicted <- data.frame(
GDP = x_train_merged_data,  # Independent variable (GDP)
actual_estimate = y_train_merged_data,  # Actual target (Estimate)
pred_1 = pred_1$pred,  # Predictions for k = 1
pred_10 = pred_10$pred,  # Predictions for k = 10
pred_20 = pred_20$pred,  # Predictions for k = 20
pred_30 = pred_30$pred,  # Predictions for k = 30
pred_40 = pred_40$pred   # Predictions for k = 40
)
# Plot the actual vs. predicted values for different k values
ggplot(predicted, aes(x = GDP, y = actual_estimate)) +
geom_point() +  # Scatter plot for actual values
geom_line(aes(y = pred_1, color = "k = 1")) +
geom_line(aes(y = pred_10, color = "k = 10")) +
geom_line(aes(y = pred_20, color = "k = 20")) +
geom_line(aes(y = pred_30, color = "k = 30")) +
geom_line(aes(y = pred_40, color = "k = 40")) +
scale_color_manual(values = c("k = 1" = "green", "k = 10" = "orange",
"k = 20" = "blue", "k = 30" = "red",
"k = 40" = "purple")) +
labs(title = "KNN Regression Estimate by Unemployement rate (Low Income Individuals)",
x = "GDP",
y = "Estimate (Log)",
color = "K Values") +
theme_minimal()
mse1 <- mean((y_train_merged_data - pred_1$pred)^2)
mse1
mse10 <- mean((y_train_merged_data - pred_10$pred)^2)
mse10
mse20 <- mean((y_train_merged_data - pred_20$pred)^2)
mse20
mse30 <- mean((y_train_merged_data - pred_30$pred)^2)
mse30
mse40 <- mean((y_train_merged_data - pred_40$pred)^2)
mse40
# Filter the data based on ACA values (ACA=1 and ACA=0)
library(fixest)
filtered_data <- mergingUNRATE %>%
filter(Low_Income == "Low" & (ACA == 1 | ACA == 0))
# Plotting the relationship between beer tax and fatality rate for ACA=1 and ACA=0
ggplot(filtered_data, aes(x = GDP, y = log_ESTIMATE, color = factor(ACA))) +
geom_point() +  # Scatter plot of data points
geom_smooth(method = "lm", se = FALSE) +  # Linear regression line without confidence interval
labs(title = "Estimate vs. GDP by ACA Status (Low Income Individuals)",
x = "GDP",
y = "Estimate (Log)",
color = "ACA Status") +
theme_minimal()
filtered_data <- mergingUNRATE %>%
filter(Low_Income == "Low" & (ACA == 1 | ACA == 0))
# Plotting the relationship between beer tax and fatality rate for ACA=1 and ACA=0
ggplot(filtered_data, aes(x = UNRATE, y = log_ESTIMATE, color = factor(ACA))) +
geom_point() +  # Scatter plot of data points
geom_smooth(method = "lm", se = FALSE) +  # Linear regression line without confidence interval
labs(title = "Estimate vs. UNRATE by ACA Status (Low Income Individuals)",
x = "UNRATE",
y = "Estimate (Log)",
color = "ACA Status") +
theme_minimal()
Medical_insured_care_forecast <- all_survey_merged %>%
as_tibble() %>%  # Convert to tibble
filter(PANEL == "Medical care", STUB_LABEL == "Insured") %>%  # Filter relevant rows
group_by(YEAR) %>%  # Group by YEAR
summarize(log_ESTIMATE = sum(log_ESTIMATE, na.rm = TRUE)) %>%  # Aggregate ESTIMATE
mutate(YEAR = as.numeric(YEAR)) %>%  # Ensure YEAR is numeric
as_tsibble(index = YEAR)  # Convert to tsibble
# Model, forecast, and plot
Medical_insured_care_forecast %>%
model(
RW = RW(log_ESTIMATE ~ drift())  # Apply Random Walk with Drift model
) %>%
forecast(h = "5 years", level = 95) %>%  # Forecast for 5 years with 95% confidence interval
autoplot(Medical_insured_care_forecast) +  # Plot with original data
geom_line(data = Medical_insured_care_forecast,
aes(x = YEAR, y = log_ESTIMATE), linetype = "dashed", colour = "#0072B2") +
labs(
title = "Forecast of Delayed Medical Care for Insured",
x = "Year",
y = "Percent of People with Lack of Access (Log)"
)+
theme_minimal() + theme(plot.title = element_text(hjust = 0.5))
Medical_care_college <- all_survey_merged %>%
as_tibble() %>%  # Convert to tibble
filter(PANEL == "Medical care", STUB_LABEL == "Some college or more") %>%  # Filter relevant rows
group_by(YEAR) %>%  # Group by YEAR
summarize(log_ESTIMATE = sum(log_ESTIMATE, na.rm = TRUE)) %>%  # Aggregate ESTIMATE
mutate(YEAR = as.numeric(YEAR)) %>%  # Ensure YEAR is numeric
as_tsibble(index = YEAR)  # Convert to tsibble
# Model, forecast, and plot
Medical_care_college %>%
model(NAIVE(log_ESTIMATE))%>%
forecast(h = "5 years", level = 95) %>%  # Forecast for 5 years with 95% confidence interval
autoplot(Medical_care_college) +  # Plot with original data
geom_line(data = Medical_care_college,
aes(x = YEAR, y = log_ESTIMATE), linetype = "dashed", colour = "#0072B2") +
labs(
title = "Forecast of Delayed Medical Care for Some College or More",
subtitle = "Forecast includes a 95% confidence interval",
x = "Year",
y = "Percent of People with Lack of Access (Log)"
)
Medical_care_college <- all_survey_merged %>%
as_tibble() %>%  # Convert to tibble
filter(PANEL == "Medical care", STUB_LABEL == "Some college or more") %>%  # Filter relevant rows
group_by(YEAR) %>%  # Group by YEAR
summarize(log_ESTIMATE = sum(log_ESTIMATE, na.rm = TRUE)) %>%  # Aggregate ESTIMATE
mutate(YEAR = as.numeric(YEAR)) %>%  # Ensure YEAR is numeric
as_tsibble(index = YEAR)  # Convert to tsibble
# Model, forecast, and plot
Medical_care_college %>%
model(NAIVE(log_ESTIMATE))%>%
forecast(h = "5 years", level = 95) %>%  # Forecast for 5 years with 95% confidence interval
autoplot(Medical_care_college) +  # Plot with original data
geom_line(data = Medical_care_college,
aes(x = YEAR, y = log_ESTIMATE), linetype = "dashed", colour = "#0072B2") +
labs(
title = "NAIVE - Forecast of Delayed Medical Care for Some College or More",
subtitle = "Forecast includes a 95% confidence interval",
x = "Year",
y = "Percent of People with Lack of Access (Log)"
)
Medical_care_no_education <- all_survey_merged %>%
as_tibble() %>%  # Convert to tibble
filter(PANEL == "Medical care", STUB_LABEL == "No high school diploma or GED") %>%  # Filter relevant rows
group_by(YEAR) %>%  # Group by YEAR
summarize(log_ESTIMATE = sum(log_ESTIMATE, na.rm = TRUE)) %>%  # Aggregate ESTIMATE
mutate(YEAR = as.numeric(YEAR)) %>%  # Ensure YEAR is numeric
as_tsibble(index = YEAR)  # Convert to tsibble
# Model, forecast, and plot
Medical_care_no_education %>%
model(NAIVE(log_ESTIMATE))%>%
forecast(h = "5 years", level = 95) %>%  # Forecast for 5 years with 95% confidence interval
autoplot(Medical_care_no_education) +  # Plot with original data
geom_line(data = Medical_care_no_education,
aes(x = YEAR, y = log_ESTIMATE), linetype = "dashed", colour = "#0072B2") +
labs(
title = "NAIVE - Forecast of Delayed Medical Care for No High School Diploma or GED",
subtitle = "Forecast includes a 95% confidence interval",
x = "Year",
y = "Percent of People with Lack of Access (Log)"
)
unemployment_rate <- read.csv("UNRATE.csv", header = TRUE, sep = ",")
unemployment_rate <- unemployment_rate %>%
mutate(year = year(DATE),
month = month(DATE),
day = day(DATE))
mergingUNRATE <- mergingGDP %>%
left_join(unemployment_rate, by = c("YEAR" = "year"))
set.seed(123)
train_merged_data <- mergingUNRATE %>%
filter(Low_Income == "Low")
x_train_merged_data <- train_merged_data$UNRATE
y_train_merged_data <- train_merged_data$log_ESTIMATE
# Apply KNN for different values of k
pred_1 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 1)
pred_10 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 10)
pred_20 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 20)
pred_30 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 30)
pred_40 <- knn.reg(train = x_train_merged_data, y = y_train_merged_data, k = 40)
# Create a dataframe to store actual and predicted values
predicted <- data.frame(
GDP = x_train_merged_data,  # Independent variable (GDP)
actual_estimate = y_train_merged_data,  # Actual target (Estimate)
pred_1 = pred_1$pred,  # Predictions for k = 1
pred_10 = pred_10$pred,  # Predictions for k = 10
pred_20 = pred_20$pred,  # Predictions for k = 20
pred_30 = pred_30$pred,  # Predictions for k = 30
pred_40 = pred_40$pred   # Predictions for k = 40
)
# Plot the actual vs. predicted values for different k values
ggplot(predicted, aes(x = GDP, y = actual_estimate)) +
geom_point() +  # Scatter plot for actual values
geom_line(aes(y = pred_1, color = "k = 1")) +
geom_line(aes(y = pred_10, color = "k = 10")) +
geom_line(aes(y = pred_20, color = "k = 20")) +
geom_line(aes(y = pred_30, color = "k = 30")) +
geom_line(aes(y = pred_40, color = "k = 40")) +
scale_color_manual(values = c("k = 1" = "green", "k = 10" = "orange",
"k = 20" = "blue", "k = 30" = "red",
"k = 40" = "purple")) +
labs(title = "KNN Regression Estimate by Unemployement rate (Low Income Individuals)",
x = "GDP",
y = "Estimate (Log)",
color = "K Values") +
theme_minimal()
filtered_data <- mergingUNRATE %>%
filter(Low_Income == "Low" & (ACA == 1 | ACA == 0))
# Plotting the relationship between beer tax and fatality rate for ACA=1 and ACA=0
ggplot(filtered_data, aes(x = UNRATE, y = log_ESTIMATE, color = factor(ACA))) +
geom_point() +  # Scatter plot of data points
geom_smooth(method = "lm", se = FALSE) +  # Linear regression line without confidence interval
labs(title = "Estimate vs. Unemployement by ACA Status (Low Income Individuals)",
x = "UNRATE",
y = "Estimate (Log)",
color = "ACA Status") +
theme_minimal()
filtered_data <- mergingUNRATE %>%
filter(Low_Income == "Low" & (ACA == 1 | ACA == 0))
# Plotting the relationship between beer tax and fatality rate for ACA=1 and ACA=0
ggplot(filtered_data, aes(x = UNRATE, y = log_ESTIMATE, color = factor(ACA))) +
geom_point() +  # Scatter plot of data points
geom_smooth(method = "lm", se = FALSE) +  # Linear regression line without confidence interval
labs(title = "Estimate vs. Unemployment by ACA Status (Low Income Individuals)",
x = "UNRATE",
y = "Estimate (Log)",
color = "ACA Status") +
theme_minimal()
# Create Low Income Variable
all_survey_merged <- all_survey_merged %>%
mutate(
Low_Income = ifelse(
STUB_LABEL %in% c(
"Black or African American only",
"Hispanic or Latino: All races",
"No high school diploma or GED",
"Medicaid",
"Uninsured"
),
"Low",  # Assign Low if in the specified categories
"NotLow"   # Assign NotLow otherwise
)
)
write.csv(all_survey_merged, "2023and2024_merged.csv", row.names = FALSE)
# DO NOT EDIT THIS
knitr::opts_chunk$set(fig.align = 'center')
knitr::opts_chunk$set(out.width = '90%')
knitr::opts_chunk$set(results = 'hold')
knitr::opts_chunk$set(fig.show = 'hold')
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
par(mar = c(4.1, 4.1, 1.1, 4.1))
hooks = knitr::knit_hooks$get()
hook_foldable = function(type) {
force(type)
function(x, options) {
res = hooks[[type]](x, options)
if (isFALSE(options[[paste0("fold.", type)]])) return(res)
paste0(
"<details open><summary>", gsub("^p", "P", gsub("^o", "O", type)), "</summary>\n\n",
res,
"\n\n</details>"
)
}
}
knitr::knit_hooks$set(
output = hook_foldable("output"),
plot = hook_foldable("plot")
)
Q <- 0
# Load necessary packages
library(caret)
library(modelsummary)
library(ggplot2)
library(dplyr)
library(tidyr)
library(fpp3)
library(tidyverse)
library(patchwork)
library(gganimate)
library(readxl)
library(forecast)
library(ggplot2)
library(purrr)
library(transformr) # Just to get it on renv
library(latex2exp)
library(scales)
library(tsibble)
library(fable)
library(fabletools)
library(FNN)
library(MASS)
install.packages("carat")
# Load necessary packages
library(caret)
# Load necessary packages
library(caret)
library(modelsummary)
library(ggplot2)
library(dplyr)
library(tidyr)
library(fpp3)
library(tidyverse)
library(patchwork)
library(gganimate)
library(readxl)
library(forecast)
library(ggplot2)
library(purrr)
library(transformr) # Just to get it on renv
library(latex2exp)
library(scales)
library(tsibble)
library(fable)
library(fabletools)
library(FNN)
library(MASS)
setwd("~/Desktop/Denison_Coursework/Senior Spring/DA401/Data and Results")
# Load data
Data2023 <- read.csv("Delay or Nonreceipt August 2023.csv", header = TRUE, sep = ",")
# Renaming Values for Comphrehension
Data2023 <- Data2023 %>%
mutate(
INDICATOR = ifelse(
INDICATOR == "Delay or nonreceipt of needed medical care, nonreceipt of needed prescription drugs, or nonreceipt of needed dental care during the past 12 months due to cost", "Yes","No"))
Data2023 <- Data2023 %>%
mutate(PANEL = case_when(
PANEL == "Delay or nonreceipt of needed medical care due to cost" ~ "Medical care",
PANEL == "Nonreceipt of needed prescription drugs due to cost" ~ "Prescription drugs",
PANEL == "Nonreceipt of needed dental care due to cost" ~ "Dental care"))
# Removing Columns that are NA or not in 2024 Data
Data2023 <- dplyr::select(Data2023, -SE, -FLAG, -AGE, -AGE_NUM, -STUB_NAME_NUM)
# Create ACA variable
Data2023 <- Data2023 %>%
mutate(ACA = ifelse(YEAR < 2010, 0, 1))  # Create dummy variable for ACA
# Save as CSV File
write.csv(Data2023, "Data2023.csv", row.names = TRUE)
# DO NOT EDIT THIS
knitr::opts_chunk$set(fig.align = 'center')
knitr::opts_chunk$set(out.width = '90%')
knitr::opts_chunk$set(results = 'hold')
knitr::opts_chunk$set(fig.show = 'hold')
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
par(mar = c(4.1, 4.1, 1.1, 4.1))
hooks = knitr::knit_hooks$get()
hook_foldable = function(type) {
force(type)
function(x, options) {
res = hooks[[type]](x, options)
if (isFALSE(options[[paste0("fold.", type)]])) return(res)
paste0(
"<details open><summary>", gsub("^p", "P", gsub("^o", "O", type)), "</summary>\n\n",
res,
"\n\n</details>"
)
}
}
knitr::knit_hooks$set(
output = hook_foldable("output"),
plot = hook_foldable("plot")
)
Q <- 0
# Load necessary packages
library(caret)
library(modelsummary)
library(ggplot2)
library(dplyr)
library(tidyr)
library(fpp3)
library(tidyverse)
library(patchwork)
library(gganimate)
library(readxl)
library(forecast)
library(ggplot2)
library(purrr)
library(transformr) # Just to get it on renv
library(latex2exp)
library(scales)
library(tsibble)
library(fable)
library(fabletools)
library(FNN)
library(MASS)
# Telehealth Data Cleaning
# Load the data
Telehealth <- read.csv("Medicare Telehealth Trends.csv", header = TRUE, sep = ",")
# Remove all rows with any missing (NA) values
Telehealth <- na.omit(Telehealth)
# Telehealth rename variables
Telehealth <- Telehealth %>% rename(Quarter = quarter)
Telehealth <- Telehealth %>% rename(State = Bene_Geo_Desc)
Telehealth <- Telehealth %>% rename(EnrollmentStatus = Bene_Mdcd_Mdcr_Enrl_Stus)
Telehealth <- Telehealth %>% rename(Race = Bene_Race_Desc)
Telehealth <- Telehealth %>% rename(Sex = Bene_Sex_Desc)
Telehealth <- Telehealth %>% rename(MedicareAccessForInsured = Bene_Mdcr_Entlmt_Stus)
Telehealth <- Telehealth %>% rename(Age = Bene_Age_Desc)
Telehealth <- Telehealth %>% rename(RuralUrban = Bene_RUCA_Desc)
Telehealth <- Telehealth %>% rename(EligibleServicesCount = Total_Bene_TH_Elig)
Telehealth <- Telehealth %>% rename(EnrollmentPartB = Total_PartB_Enrl)
Telehealth <- Telehealth %>% rename(TelehealthVisits = Total_Bene_Telehealth)
Telehealth <- Telehealth %>% rename(PercentTelehealthPartB = Pct_Telehealth)
