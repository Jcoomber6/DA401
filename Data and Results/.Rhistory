Internet_transposed2022$State <- gsub("Puerto.Rico", "Puerto Rico", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("West.Virginia", "West Virginia", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("New.Hampshire", "New Hampshire", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("North.Carolina", "North Carolina", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("South.Carolina", "South Carolina", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("Rhode.Island", "Rhode Island", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("North.Dakota", "North Dakota", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("South.Dakota", "South Dakota", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("New.Mexico", "New Mexico", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("New.Jersey", "New Jersey", Internet_transposed2022$State)
Internet_transposed2022$State <- gsub("New.York", "New York", Internet_transposed2022$State)
InternetSubs2021 <- read.csv("Presence and Types of Internet Subscriptions_2021.csv", header = TRUE, sep = ",")
# Transpose using pivot_longer and pivot_wider
Internet_transposed2021 <- InternetSubs2021 %>%
t() %>%
as.data.frame(stringsAsFactors = FALSE)
# Store original column names as a new column
Internet_transposed2021 <- Internet_transposed2021 %>%
mutate(Original_Column_Names = rownames(Internet_transposed2021))
# Set first row as column names
colnames(Internet_transposed2021) <- Internet_transposed2021[1, ]
# Remove the first row, keeping the new column names
Internet_transposed2021 <- Internet_transposed2021[-1, ]
# Remove all non-letter characters from column names
colnames(Internet_transposed2021) <- gsub("[^A-Za-z]", "", colnames(Internet_transposed2021))
colnames(Internet_transposed2021) <- make.unique(colnames(Internet_transposed2021))
Internet_transposed2021 <- Internet_transposed2021 %>% rename(State = LabelGrouping)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(WithInternet = WithanInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(DialUpNoInternetSubs = DialupwithnoothertypeofInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(BroadBandAnyType = Broadbandofanytype)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(CellularData = Cellulardataplan)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(CellularDataAndAnotherType = CellulardataplanwithnoothertypeofInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(CableFiberOrDSL = BroadbandsuchascablefiberopticorDSL)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(CableFiberOrDSLOnly = BroadbandsuchascablefiberopticorDSLwithnoothertypeofInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(SatelliteInternet = SatelliteInternetservice)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(SatelliteInternetOnly = SatelliteInternetservicewithnoothertypeofInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(OtherServiceOnly = OtherservicewithnoothertypeofInternetsubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(InternetAccessNoSubscrition = Internetaccesswithoutasubscription)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(NoInternet = NoInternetaccess)
Internet_transposed2021 <- Internet_transposed2021 %>% rename(TotalWithInternet = Total)
# Keep only rows with "Estimate" and remove "Margin.of.Error"
Internet_transposed2021 <- Internet_transposed2021[!grepl("Margin.of.Error", rownames(Internet_transposed2021)), ]
# Rename row names by removing "..Estimate"
rownames(Internet_transposed2021) <- gsub("\\.\\.Estimate", "", rownames(Internet_transposed2021))
Internet_transposed2021$State <- gsub("\\.\\.Estimate", "", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("District.of.Columbia", "District of Columbia", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("Puerto.Rico", "Puerto Rico", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("West.Virginia", "West Virginia", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("New.Hampshire", "New Hampshire", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("North.Carolina", "North Carolina", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("South.Carolina", "South Carolina", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("Rhode.Island", "Rhode Island", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("North.Dakota", "North Dakota", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("South.Dakota", "South Dakota", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("New.Mexico", "New Mexico", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("New.Jersey", "New Jersey", Internet_transposed2021$State)
Internet_transposed2021$State <- gsub("New.York", "New York", Internet_transposed2021$State)
InternetSubs2020 <- read.csv("Presence and Types of Internet Subscriptions_2020.csv", header = TRUE, sep = ",")
# Transpose using pivot_longer and pivot_wider
Internet_transposed2020 <- InternetSubs2020 %>%
t() %>%
as.data.frame(stringsAsFactors = FALSE)
# Store original column names as a new column
Internet_transposed2020 <- Internet_transposed2020 %>%
mutate(Original_Column_Names = rownames(Internet_transposed2020))
# Set first row as column names
colnames(Internet_transposed2020) <- Internet_transposed2020[1, ]
# Remove the first row, keeping the new column names
Internet_transposed2020 <- Internet_transposed2020[-1, ]
# Remove all non-letter characters from column names
colnames(Internet_transposed2020) <- gsub("[^A-Za-z]", "", colnames(Internet_transposed2020))
colnames(Internet_transposed2020) <- make.unique(colnames(Internet_transposed2020))
Internet_transposed2020 <- Internet_transposed2020 %>% rename(State = LabelGrouping)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(WithInternet = WithanInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(DialUpNoInternetSubs = DialupwithnoothertypeofInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(BroadBandAnyType = Broadbandofanytype)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(CellularData = Cellulardataplan)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(CellularDataAndAnotherType = CellulardataplanwithnoothertypeofInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(CableFiberOrDSL = BroadbandsuchascablefiberopticorDSL)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(CableFiberOrDSLOnly = BroadbandsuchascablefiberopticorDSLwithnoothertypeofInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(SatelliteInternet = SatelliteInternetservice)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(SatelliteInternetOnly = SatelliteInternetservicewithnoothertypeofInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(OtherServiceOnly = OtherservicewithnoothertypeofInternetsubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(InternetAccessNoSubscrition = Internetaccesswithoutasubscription)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(NoInternet = NoInternetaccess)
Internet_transposed2020 <- Internet_transposed2020 %>% rename(TotalWithInternet = Total)
# Keep only rows with "Estimate" and remove "Margin.of.Error"
Internet_transposed2020 <- Internet_transposed2020[!grepl("Margin.of.Error", rownames(Internet_transposed2020)), ]
# Rename row names by removing "..Estimate"
rownames(Internet_transposed2020) <- gsub("\\.\\.Estimate", "", rownames(Internet_transposed2020))
Internet_transposed2020$State <- gsub("\\.\\.Estimate", "", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("District.of.Columbia", "District of Columbia", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("Puerto.Rico", "Puerto Rico", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("West.Virginia", "West Virginia", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("New.Hampshire", "New Hampshire", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("North.Carolina", "North Carolina", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("South.Carolina", "South Carolina", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("Rhode.Island", "Rhode Island", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("North.Dakota", "North Dakota", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("South.Dakota", "South Dakota", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("New.Mexico", "New Mexico", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("New.Jersey", "New Jersey", Internet_transposed2020$State)
Internet_transposed2020$State <- gsub("New.York", "New York", Internet_transposed2020$State)
# Create a list of the vehicle datasets
Internet_data <- list(
"2020" = Internet_transposed2020,
"2021" = Internet_transposed2021,
"2022" = Internet_transposed2022,
"2023" = Internet_transposed2023
)
# Convert each yearâ€™s vehicle data into a long format and combine
Internet_long <- bind_rows(
lapply(names(Internet_data), function(year) {
Internet_data[[year]] %>%
mutate(Year = as.numeric(year)) # Add the year as a column
})
)
# Merge the reshaped Internet dataset with TelehealthandPopulation_Vehicle on State and Year
TelehealthandPopulation_VehicleInternet <- merge(TelehealthandPopulation_Vehicle, Internet_long, by = c("State", "Year"), all = TRUE)
# Convert columns from character to numeric
columns_to_convert <- c("POP", "TotalNumVehicles", "TotalOwned",
"NoVehicleAvailable", "OneVehicleAvailable",
"TwoVehicleAvailable", "ThreeVehicleAvailable",
"FourVehicleAvailable", "FiveOrMoreVehicleAvailable",
"TotalRent", "NoRentVehicleAvailable",
"OneRentVehicleAvailable", "TwoRentVehicleAvailable",
"ThreeRentVehicleAvailable", "FourRentVehicleAvailable",
"FiveOrMoreRentVehicleAvailable", "TotalWithInternet",
"WithInternet", "DialUpNoInternetSubs",
"BroadBandAnyType", "CellularData",
"CellularDataAndAnotherType", "CableFiberOrDSL",
"CableFiberOrDSLOnly", "SatelliteInternet",
"SatelliteInternetOnly", "OtherServiceOnly",
"InternetAccessNoSubscrition", "NoInternet")
# Apply gsub to clean each column before conversion
TelehealthandPopulation_VehicleInternet[columns_to_convert] <- lapply(TelehealthandPopulation_VehicleInternet[columns_to_convert], function(x) {
# Remove non-numeric characters
cleaned_x <- gsub("[^0-9.-]", "", x)
# Convert to numeric
as.numeric(cleaned_x)
})
#Create a new variable for TotalNumVehicles per capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TotalNumVehiclesPerCapita = TotalNumVehicles / POP  # Normalize per person (per capita)
)
#Create a new variable for TotalOwned per capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TotalOwnedPerCapita = (TotalNumVehicles / POP)
)
#Create a new variable for NoVehicleAvailable per capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
NoVehicleAvailablePerCapita = (NoVehicleAvailable / POP)
)
#Create a new variable for OneVehicleAvailable per capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
OneVehicleAvailablePerCapita = (OneVehicleAvailable / POP)
)
#Create a new variable for TwoVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TwoVehicleAvailablePerCapita = (TwoVehicleAvailable / POP)
)
#Create a new variable for ThreeVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
ThreeVehicleAvailablePerCapita = (ThreeVehicleAvailable / POP)
)
#Create a new variable for FourVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
FourVehicleAvailablePerCapita = (FourVehicleAvailable / POP)
)
#Create a new variable for FiveOrMoreVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
FiveOrMoreVehicleAvailablePerCapita = (FiveOrMoreVehicleAvailable / POP)
)
#Create a new variable for TotalRent per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TotalRentPerCapita = (TotalRent / POP)
)
#Create a new variable for NoRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
NoRentVehicleAvailablePerCapita = (NoRentVehicleAvailable / POP)
)
#Create a new variable for OneRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
OneRentVehicleAvailablePerCapita = (OneRentVehicleAvailable / POP)
)
#Create a new variable for TwoRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TwoRentVehicleAvailablePerCapita = (TwoRentVehicleAvailable / POP)
)
#Create a new variable for ThreeRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
ThreeRentVehicleAvailablePerCapita = (ThreeRentVehicleAvailable / POP)
)
#Create a new variable for FourRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
FourRentVehicleAvailablePerCapita = (FourRentVehicleAvailable / POP)
)
#Create a new variable for FiveOrMoreRentVehicleAvailable per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
FiveOrMoreRentVehicleAvailablePerCapita = (FiveOrMoreRentVehicleAvailable / POP)
)
#Create a new variable for WithInternet per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
WithInternetPerCapita = (WithInternet / POP)
)
#Create a new variable for DialUpNoInternetSubs per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
DialUpNoInternetSubsPerCapita = (DialUpNoInternetSubs / POP)
)
#Create a new variable for BroadBandAnyType per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
BroadBandAnyTypePerCapita = (BroadBandAnyType / POP)
)
#Create a new variable for CellularData per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
CellularDataPerCapita = (CellularData / POP)
)
#Create a new variable for CellularDataAndAnotherType per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
CellularDataAndAnotherTypePerCapita = (CellularDataAndAnotherType / POP)
)
#Create a new variable for CableFiberOrDSL per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
CableFiberOrDSLPerCapita = (CableFiberOrDSL / POP)
)
#Create a new variable for SatelliteInternet per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
SatelliteInternetPerCapita = (SatelliteInternet / POP)
)
#Create a new variable for SatelliteInternetOnly per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
SatelliteInternetOnlyPerCapita = (SatelliteInternetOnly / POP)
)
#Create a new variable for OtherServiceOnly per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
OtherServiceOnlyPerCapita = (OtherServiceOnly / POP)
)
#Create a new variable for InternetAccessNoSubscrition per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
InternetAccessNoSubscritionPerCapita = (InternetAccessNoSubscrition / POP)
)
#Create a new variable for NoInternet per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
NoInternetPerCapita = (NoInternet / POP)
)
#Create a new variable for TelehealthVisits per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
TelehealthVisitsPerCapita = (TelehealthVisits / POP)
)
#Create a new variable for EligibleServicesCount per Capita
TelehealthandPopulation_VehicleInternet <- TelehealthandPopulation_VehicleInternet %>%
mutate(
EligibleServicesCountPerCapita = (EligibleServicesCount / POP)
)
Hospitals <- read.csv("CentersForMedicareAndMedicaidServicesFacilities Hospitals.csv", header = TRUE, sep = ",")
# Remove all non-letter characters from column names
colnames(Hospitals) <- gsub("[^A-Za-z]", "", colnames(Hospitals))
# Removing Columns that are NA
Hospitals <- dplyr::select(Hospitals, -NoofBeds, -NoofCertifiedBeds, -NoofMedicaidNursingBeds, -NoofSkilledNursingBeds, -NoofICFMRBeds, - NoofPhysicianAssistants, -NoofNursePractitioners, -NoofDirectCarePersonnel, -NoofOtherPersonnel, -EmployeeCount, -FederallyFundedHealthCenterIndicator, -RuralHealthCenterProviderNumber, -RuralHealthClinicIndicator)
# Removing Columns that are Not Needed
Hospitals <- dplyr::select(Hospitals, -Telephone, -ZIPCode, -StreetAddress, - ProviderNo)
# Remove rows where State is one of the specified territories
Hospitals <- Hospitals %>%
filter(!State %in% c("U.S. Virgin Islands", "American Samoa", "Guam", "Northern Mariana Islands"))
#Hospital count
Hospitals$hospital_count <- table(Hospitals$State)[Hospitals$State]
# Select the 'State' and 'hospital_count' columns from Hospitals
hospital_count_df <- Hospitals %>%
group_by(State) %>%
summarize(hospital_count = n())
# Merge the Hospital dataset with TelehealthandPopulation_VehicleInternet on State
TelehealthandPopulation_VehicleInternetHospital <- merge(TelehealthandPopulation_VehicleInternet, hospital_count_df, by = c("State"), all = TRUE)
#Create a new variable for NoInternet per Capita
TelehealthandPopulation_VehicleInternetHospital <- TelehealthandPopulation_VehicleInternetHospital %>%
mutate(
HospitalCountPerCapita = (hospital_count / POP)
)
# Load the data
GDP <- read.csv("GDP.csv", header = TRUE, sep = ",")
UNRATE <- read.csv("UNRATE.csv", header = TRUE, sep = ",")
GDP <- GDP %>%
mutate(Year = year(as.Date(observation_date)))
UNRATE <- UNRATE %>%
mutate(Year = year(as.Date(observation_date)))
GDP <- dplyr::select(GDP, -observation_date)
UNRATE <- dplyr::select(UNRATE, -observation_date)
# Merge only on Year and keep only GDP and UNRATE
TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE <- TelehealthandPopulation_VehicleInternetHospital %>%
inner_join(GDP, by = "Year") %>%
inner_join(UNRATE, by = "Year")
# Create bar plot
TelehealthandPopulation_VehicleInternet %>%
filter(Race != "All") %>%
ggplot(aes(x = Race, y = TelehealthVisitsPerCapita, fill = Race)) +
geom_bar(stat = "identity") +
labs(title = "Telehealth Visits by Race Category",
x = "Race Category",
y = "Number of Telehealth Visits (Per Capita)") +
scale_y_continuous(labels = scales::comma) +  # Format y-axis with full numbers and commas
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+  # Rotates x-axis labels
theme(legend.position = "none")  # Remove the legend
# Create bar plot
TelehealthandPopulation_VehicleInternet %>%
filter(Race != "All") %>%
ggplot(aes(x = Race, y = EligibleServicesCountPerCapita, fill = Race)) +
geom_bar(stat = "identity") +
labs(title = "Eligible Services by Race Category",
x = "Race Category",
y = "Number of Eligible Services (Per Capita)") +
scale_y_continuous(labels = scales::comma) +  # Format y-axis with full numbers and commas
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+  # Rotates x-axis labels
theme(legend.position = "none")  # Remove the legend
TelehealthandPopulation_VehicleInternet %>%
filter(Race != "All") %>%  # Exclude "All" from the dataset
count(Race) %>%
ggplot(aes(x = Race, y = n, fill = Race)) +  # 'n' is the count of each race
geom_bar(stat = "identity") +
labs(title = "Count of Each Race in Dataset",
x = "Race",
y = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels if needed
# Create bar plot
TelehealthandPopulation_VehicleInternet %>%
filter(EnrollmentStatus != "All") %>%
ggplot(aes(x = EnrollmentStatus, y = TelehealthVisitsPerCapita, fill = EnrollmentStatus)) +
geom_bar(stat = "identity") +
labs(title = "Telehealth Visits by Enrollment Status",
x = "Enrollment Status",
y = "Number of Telehealth Visits (Per Capita)") +
scale_y_continuous(labels = scales::comma) +  # Format y-axis with full numbers and commas
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotates x-axis labels
# Create bar plot
TelehealthandPopulation_VehicleInternet %>%
ggplot(aes(x = Year, y = TelehealthVisitsPerCapita, fill = factor(Year))) +  # Assign unique color per year
geom_bar(stat = "identity") +
labs(x = "Year",
y = "Number of Telehealth Visits (Per Capita)") +
scale_y_continuous(labels = scales::comma) +  # Format y-axis with full numbers and commas
theme_minimal()+
theme(legend.position = "none")  # Remove the legend
# Create bar plot
TelehealthandPopulation_VehicleInternet %>%
ggplot(aes(x = Year, y = EligibleServicesCountPerCapita, fill = factor(Year))) +
geom_bar(stat = "identity") +
labs(x = "Year",
y = "Number of Eligible Services (Per Capita)") +
scale_y_continuous(labels = scales::comma) +  # Format y-axis with full numbers and commas
theme_minimal() +
theme(legend.position = "none")  # Remove the legend
TelehealthandPopulation_VehicleInternet %>%
ggplot(aes(x = factor(Year), y = TelehealthVisitsPerCapita, fill = factor(Quarter))) +
geom_bar(stat = "identity", position = "dodge") +  # Places Q1â€“Q4 next to each other for each Year
labs(title = "Telehealth Visits by Quarter and Year",
x = "Year",
y = "Number of Telehealth Visits (Per Capita)",
fill = "Quarter") +
scale_y_continuous(labels = scales::comma) +  # Format y-axis with commas
scale_fill_brewer(palette = "Paired") +  # Use a high-contrast color palette
theme_minimal()
# Create bar plot
TelehealthandPopulation_VehicleInternetHospital %>%
arrange(desc(TelehealthVisitsPerCapita)) %>%  # Arrange in descending order
ggplot(aes(x = fct_reorder(State, TelehealthVisitsPerCapita, .desc = TRUE), y = TelehealthVisitsPerCapita, fill = State)) +
geom_bar(stat = "identity") +
labs(title = "Telehealth Visits by State",
x = "State",
y = "Number of Telehealth Visits (per Capita)") +
scale_y_continuous(labels = scales::comma) +  # Format y-axis with full numbers and commas
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")  # Rotates x-axis labels and removes legend
# Create bar plot of number of hospitals by state
TelehealthandPopulation_VehicleInternetHospital %>%
arrange(desc(HospitalCountPerCapita)) %>%  # Arrange in descending order
ggplot(aes(x = fct_reorder(State, HospitalCountPerCapita, .desc = TRUE), y = HospitalCountPerCapita, fill = State)) +
geom_bar(stat = "identity") +
labs(title = "Number of Hospitals by State",
x = "State",
y = "Number of Hospitals (per Capita)") +
scale_y_continuous(labels = scales::comma) +  # Format y-axis with full numbers and commas
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")  # Rotates x-axis labels and removes legend
# Count people with each internet access type
internet_counts <- TelehealthandPopulation_VehicleInternet %>%
summarise(
WithInternet = sum(WithInternet, na.rm = TRUE),
DialUpNoInternetSubs = sum(DialUpNoInternetSubs, na.rm = TRUE),
BroadBandAnyType = sum(BroadBandAnyType, na.rm = TRUE),
CellularData = sum(CellularData, na.rm = TRUE),
CellularDataAndAnotherType = sum(CellularDataAndAnotherType, na.rm = TRUE),
CableFiberOrDSL = sum(CableFiberOrDSL, na.rm = TRUE),
CableFiberOrDSLOnly = sum(CableFiberOrDSLOnly, na.rm = TRUE),
SatelliteInternet = sum(SatelliteInternet, na.rm = TRUE),
SatelliteInternetOnly = sum(SatelliteInternetOnly, na.rm = TRUE),
OtherServiceOnly = sum(OtherServiceOnly, na.rm = TRUE),
InternetAccessNoSubscrition = sum(InternetAccessNoSubscrition, na.rm = TRUE),
NoInternet = sum(NoInternet, na.rm = TRUE)
)
# Reshape the data to long format for ggplot
internet_counts_long <- internet_counts %>%
gather(key = "InternetAccessType", value = "Count")  # Reshapes the data
# Create a bar plot
ggplot(internet_counts_long, aes(x = reorder(InternetAccessType, Count), y = Count, fill = InternetAccessType)) +
geom_bar(stat = "identity") +
labs(title = "Count of People with Different Internet Access Types",
x = "Internet Access Type",
y = "Count") +
scale_y_continuous(labels = scales::comma) +  # Format y-axis with full numbers and commas
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+  # Rotates x-axis labels for readability
theme(legend.position = "none")  # Remove the legend
TelehealthandPopulation_VehicleInternetHospital %>%
filter(RuralUrban != "All") %>%
ggplot(aes(x = RuralUrban, y = TelehealthVisitsPerCapita, fill = RuralUrban)) +
geom_bar(stat = "identity") +
labs(x = "Category of State",
y = "Number of Telehealth Visits (Per Capita)") +
scale_y_continuous(labels = scales::comma) +  # Format y-axis with full numbers and commas+
theme_minimal() +
theme(legend.position = "none")
model1 <- lm(TelehealthVisitsPerCapita ~ TotalOwnedPerCapita + TotalRentPerCapita + WithInternetPerCapita +
HospitalCountPerCapita + GDP + UNRATE,
TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE) # without State/Year fixed effects
model2 <- lm(TelehealthVisitsPerCapita ~ TotalOwnedPerCapita + TotalRentPerCapita + WithInternetPerCapita +
HospitalCountPerCapita + GDP + UNRATE + State,
TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE) # with State fixed effects
model3 <- lm(TelehealthVisitsPerCapita ~ TotalOwnedPerCapita + TotalRentPerCapita + WithInternetPerCapita +
HospitalCountPerCapita + GDP + UNRATE + State + Year,
TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE) # with State and Year fixed effects
regz <- list(`No Fixed Effect` = model1,
`State Fixed Effect` = model2,
`State and Year Fixed Effect` = model3)
coefz <- c("TotalOwnedPerCapita" = "Vehicles Owned",
"TotalRentPerCapita" = "Vehicles Rented",
"WithInternetPerCapita" = "With Internet Access",
"HospitalCountPerCapita" = "Hospitals Count",
"GDP" = "GDP",
"UNRATE" = "Unemployment Rate")
gofz <- c("nobs", "r.squared")
rowz <- as.data.frame(matrix(c('State Fixed Effects', "No", "Yes", "Yes",
"Year Fixed Effects", "No", "No", "Yes"),
byrow = TRUE, nrow = 2)) # 2 rows
attr(rowz, 'position') <- c(12, 13)
modelsummary(regz,
estimate = "{estimate}{stars}",
gof_map = gofz,
add_rows = rowz,
coef_map = coefz)
# Load necessary package
library(car)
# Fit the model (without fixed effects for accurate VIF calculation)
vif_model <- lm(TelehealthVisitsPerCapita ~ TotalOwnedPerCapita + TotalRentPerCapita + WithInternetPerCapita +
HospitalCountPerCapita + GDP + UNRATE,
data = TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE)
# Calculate VIF
vif_values <- vif(vif_model)
print(vif_values)
# Load necessary libraries
library(ggplot2)
library(viridis)
library(dplyr)
# Define numeric columns
numeric_columns <- c("TotalOwnedPerCapita", "TotalRentPerCapita", "WithInternetPerCapita", "HospitalCountPerCapita", "GDP", "UNRATE")
# Compute correlation matrix
cor_matrix <- cor(TelehealthandPopulation_VehicleInternetHospital_GDPUNRATE[numeric_columns],
use = "pairwise.complete.obs")
# Convert correlation matrix to a long format dataframe
cor_df <- as.data.frame(as.table(cor_matrix)) %>%
mutate(row = as.numeric(factor(Var1, levels = numeric_columns)),
col = as.numeric(factor(Var2, levels = numeric_columns))) %>%
filter(row > col)  # Keep only lower triangle elements
# Create correlation heatmap
ggplot(data = cor_df, aes(Var1, Var2, fill = Freq)) +
geom_tile() +
geom_text(aes(label = round(Freq, 2)), color = "white", size = 3) +
scale_fill_viridis(option = "D") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Correlation Heatmap of Key Variables",
x = "Features",
y = "Features",
fill = "Correlation")
